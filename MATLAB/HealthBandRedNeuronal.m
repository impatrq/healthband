function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 23-Nov-2023 20:38:02.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx4 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.keep = [2 3 4];
x1_step2.xoffset = [0;21;23.3];
x1_step2.gain = [2;0.0526315789473684;0.0888888888888889];
x1_step2.ymin = -1;

% Layer 1
b1 = [-2.9707571630452465072;-1.7577460383411731559;-0.0090368683431896260072;0.10634062441682062827;0.35095273141830751751;-1.4363960166376803507;-2.4483688815662265625];
IW1_1 = [1.6232811510869868954 0.5269959736219552715 2.1875345849580649649;-0.18771692352457070019 3.3280245881102925587 -4.099007743995471742;-2.469010792041919089 0.90657274559625278254 0.22979199067050218308;1.0086947817364670943 -2.4822150983957000925 1.8208265241293668524;0.84933089357746449632 2.5850119448638571029 2.0505631988461852089;-1.7881092005561800562 1.973296791107528092 1.5097204303459086372;-2.3996002570490748695 -1.1682711374390484238 0.73580350328908972202];

% Layer 2
b2 = -1.1647434606842432814;
LW2_1 = [-0.72248131204547272333 1.4339592710787816277 1.2224851305434951687 1.4787454638837396192 0.80536737244349887455 -0.91146978434527736734 -0.60224782177835678443];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0168067226890756;
y1_step1.xoffset = 78;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = removeconstantrows_apply(x1,x1_step1);
xp1 = mapminmax_apply(xp1,x1_step2);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings)
y = x(settings.keep,:);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
